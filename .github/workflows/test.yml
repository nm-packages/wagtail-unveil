name: Run Tests

on:
  push:
    branches: [ main ]
  pull_request:
    branches: [ main ]
  workflow_dispatch:  # Allows manual triggering

jobs:
  python-matrix-tests:
    runs-on: ubuntu-latest
    strategy:
      matrix:
        python-version: ['3.9', '3.10', '3.11', '3.12', '3.13']
    
    steps:
    - uses: actions/checkout@v4
    
    - name: Install uv
      uses: astral-sh/setup-uv@v5
      with:
        python-version: ${{ matrix.python-version }}
        enable-cache: true
        cache-dependency-glob: "uv.lock"
    
    - name: Install tox and tox-gh-actions
      run: |
        uv pip install tox tox-uv tox-gh-actions
    
    - name: Run tox
      # tox-gh-actions will automatically select the correct environment based on the Python version
      run: |
        tox

  dev-branch-test:
    runs-on: ubuntu-latest
    needs: python-matrix-tests
    
    steps:
    - uses: actions/checkout@v4
    
    - name: Install uv
      uses: astral-sh/setup-uv@v5
      with:
        python-version: '3.13'  # Use Python 3.13 for development/main branch testing
        enable-cache: true
        cache-dependency-glob: "uv.lock"
    
    - name: Install tox
      run: |
        uv pip install tox tox-uv
    
    - name: Run development/main branch tests
      run: |
        tox -e wtmain-djmain-py313
      continue-on-error: true  # Allow failure as per tox configuration

  management-command-test:
    runs-on: ubuntu-latest
    needs: python-matrix-tests
    
    steps:
    - uses: actions/checkout@v4
    
    - name: Install uv
      uses: astral-sh/setup-uv@v5
      with:
        python-version: '3.12'  # Use latest stable Python version for CLI tests
        enable-cache: true
        cache-dependency-glob: "uv.lock"
    
    - name: Install the project for CLI testing
      run: |
        uv sync --locked --all-extras --dev

    - name: Run migrations
      run: |
        uv run manage.py migrate
        
    - name: Run list_admin_urls (default)
      run: |
        uv run manage.py list_admin_urls
        
    - name: Run list_admin_urls (with all flags)
      run: |
        uv run manage.py list_admin_urls --base-url="http://example.com" --output=file --file=admin_urls_test.txt --max-instances=2
        
    - name: Verify output file was created
      run: |
        if [ -f "admin_urls_test.txt" ]; then
          echo "Output file admin_urls_test.txt was successfully created"
          cat admin_urls_test.txt
          # Check if the file contains the expected content
          if grep -q "http://example.com/admin/" admin_urls_test.txt; then
            echo "Output file contains the expected content"
          else
            echo "Error: Output file does not contain the expected content"
            exit 1
          fi
        else
          echo "Error: Output file admin_urls_test.txt was not created"
          exit 1
        fi